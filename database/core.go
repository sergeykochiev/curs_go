package database

import (
	"log"
	"os"

	"github.com/google/uuid"
	"github.com/sergeykochiev/curs/backend/database/entity"
	"gorm.io/driver/sqlite"
	"gorm.io/gorm"
)

func InitDb(db *gorm.DB) error {
	data, err := os.ReadFile("schema.sql")
	if err != nil {
		log.Fatal("E cannot read schema file (./schema.sql): ", err.Error())
	}
	res := db.Exec(string(data))
	if res.Error != nil {
		println("E initializing db failed: ", res.Error.Error())
	}
	return err
}

func ConnectDb(filepath string) (*gorm.DB, error) {
	return gorm.Open(sqlite.Open(filepath), &gorm.Config{})
}

func CreateNewDataDb(main_db *gorm.DB) *gorm.DB {
	dbuuid := uuid.New().String()
	name := "autogenerated_" + dbuuid
	filepath := dbuuid + ".db"
	db, err := ConnectDb(filepath)
	if err != nil {
		log.Fatal("F connect to autogenerated data db: ", err.Error())
	}
	if err = InitDb(db); err != nil {
		log.Fatal("F initialize uninitialized data db: ", err.Error())
	}
	if res := main_db.Create(&entity.DatabaseEntity{Name: name, Filepath: filepath, Is_initialized: 1}); res.Error != nil {
		log.Fatal("F create data db: ", err.Error())
	}
	return db
}

func GetOldDataDb(main_db *gorm.DB, db_entity entity.DatabaseEntity) *gorm.DB {
	db, err := ConnectDb(db_entity.Filepath)
	if err != nil {
		log.Fatal("F Cannot connect to data db: ", err.Error())
	}
	if db_entity.Is_initialized == 0 {
		if err = InitDb(db); err != nil {
			log.Fatal("F Cannot initialize uninitialized data db: ", err.Error())
		}
		db_entity.Is_initialized = 1
		if res := main_db.Updates(&db_entity); res.Error != nil {
			log.Fatal("F update data db: ", err.Error())
		}
	}
	return db
}
